using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.DirectoryServices;

namespace couplerWriter
{

    class JRBFilesRW
    {
        /* Class to provide file IO for NDS updates and lookups
         * using JRBUtils
         */
        String mJRBFilesPath = "";
        String mOnNDSFile = "onNDSFile.txt";
        String mJBLookupExe = "jblookup.exe";
        String mJBLookupBat = "\\staff\\todo\\jblookup.bat";

        public JRBFilesRW(String aJRBFilesPath)
        {
            mJRBFilesPath = aJRBFilesPath;
        }
        // createNDSEnableString
        private String enableNDSString(staffSpec aStaffSpec)
        {
            if (aStaffSpec.QLId != "")
            {
                String FullName = aStaffSpec.Forename + " " + aStaffSpec.Surname;
                String ExpireDate = "none";
                String Password = ""; //default
                String[] AD = aStaffSpec.ActionData.Split('=');
                if (AD[0].ToString() == "Password")  // generated by StaffActivate
                {
                    Password = AD[1].ToString();
                }
                String Description = "Updated on " + DateTime.Now;
                String wNewStaffJRBText =
                    // "!Template=" + aStaffSpec.Template + "\n" +
                    "!Name context = " + "users" + aStaffSpec.Context + "\n";
                wNewStaffJRBText +=
                    "\"" + aStaffSpec.NDSName + "\"" + "," + "\"" + aStaffSpec.Surname.ToUpper() + "\"" +
                    "," + "\"" + aStaffSpec.Forename.ToUpper() + "\"" +
                    "," + "\"" + Password + "\"" +
                    "," + "\"" + FullName.ToUpper() + "\"" + "," + "\"" + aStaffSpec.Department.ToUpper() + "\"" +
                    //"," + "\"" + aStaffSpec.Site.ToUpper() + "\"" + 
                    "," + "\"" + aStaffSpec.JobTitle.ToUpper() + "\"" +
                    "," + "\"" + aStaffSpec.Tel + "\"" + "," + "\"" + aStaffSpec.EmailAddress.ToUpper() + "\"" +
                    "," + "\"" + Description + "\"" +
                    "," + "\"" + aStaffSpec.StaffID + "\"" +
                    "," + "\"" + ExpireDate + "\"";
                //"," + "\"" + aStaffSpec.HomeVolRestrict + "\"" +
                //"," + "\"" + aStaffSpec.SharedVolRestrict + "\"" +
                //"," + "\"" + aStaffSpec.Vol1VolRestrict + "\"";

                return wNewStaffJRBText;
            }
            else return "";
        }

        private String disableNDSString(staffSpec aStaffSpec)
        {
            if (aStaffSpec.QLId != "")
            {
                String FullName = aStaffSpec.Forename + " " + aStaffSpec.Surname;
                String ExpireDate = "none";
                String Password = ""; //default
                String[] AD = aStaffSpec.ActionData.Split('=');
                if (AD[0].ToString() == "Password")  // generated by StaffActivate
                {
                    Password = AD[1].ToString();
                }
                String Description = "Disabled on " + DateTime.Now;
                String wNewStaffJRBText =
                    // "!Template=" + aStaffSpec.Template + "\n" +
                    "!Name context = " + "users" + aStaffSpec.Context + "\n";
                wNewStaffJRBText +=
                    "\"" + aStaffSpec.NDSName + "\"" + "," + "\"" + aStaffSpec.Surname.ToUpper() + "\"" +
                    "," + "\"" + aStaffSpec.Forename.ToUpper() + "\"" +
                    "," + "\"" + Password + "\"" +
                    "," + "\"" + FullName.ToUpper() + "\"" + "," + "\"" + aStaffSpec.Department.ToUpper() + "\"" +
                    //"," + "\"" + aStaffSpec.Site.ToUpper() + "\"" + 
                    "," + "\"" + aStaffSpec.JobTitle.ToUpper() + "\"" +
                    "," + "\"" + aStaffSpec.Tel + "\"" + "," + "\"" + aStaffSpec.EmailAddress.ToUpper() + "\"" +
                    "," + "\"" + Description + "\"" +
                    "," + "\"" + aStaffSpec.StaffID + "\"" +
                    "," + "\"" + ExpireDate + "\"";
                //"," + "\"" + aStaffSpec.HomeVolRestrict + "\"" +
                //"," + "\"" + aStaffSpec.SharedVolRestrict + "\"" +
                //"," + "\"" + aStaffSpec.Vol1VolRestrict + "\"";

                return wNewStaffJRBText;
            }
            else return "";
        }

        private String createNDSString(staffSpec aStaffSpec)
        {
            if (aStaffSpec.QLId != "")
            {
                String FullName = aStaffSpec.Forename + " " + aStaffSpec.Surname;
                String Password = "seaside";
                String ExpireDate = "none";
                String Description = "Created on " + DateTime.Now;
                String wNewStaffJRBText =
                    // "!Template=" + aStaffSpec.Template + "\n" +
                    "!Name context = " + "users" + aStaffSpec.Context + "\n" +
                    "!Home directory volume=" + aStaffSpec.HomeVol + "\n" +
                    "!Home directory path=users\n";
                if (aStaffSpec.GWise)
                    wNewStaffJRBText +=
                        "!Groupwise add users=y" + "\n" +
                        "!Groupwise domain object=.warkscollege.groupwise.wc" + "\n" +
                        "!Groupwise post office=" + aStaffSpec.PostOffice + "\n";
                wNewStaffJRBText +=
                    "\"" + aStaffSpec.NDSName + "\"" + "," + "\"" + aStaffSpec.Surname.ToUpper() + "\"" +
                    "," + "\"" + aStaffSpec.Forename.ToUpper() + "\"" + "," + "\"" + Password + "\"" +
                    "," + "\"" + FullName.ToUpper() + "\"" + "," + "\"" + aStaffSpec.Department.ToUpper() + "\"" +
                    //"," + "\"" + aStaffSpec.Site.ToUpper() + "\"" + 
                    "," + "\"" + aStaffSpec.JobTitle.ToUpper() + "\"" +
                    "," + "\"" + aStaffSpec.Tel + "\"" + "," + "\"" + aStaffSpec.EmailAddress.ToUpper() + "\"" +
                    "," + "\"" + Description + "\"" +
                    "," + "\"" + aStaffSpec.StaffID + "\"" +
                    "," + "\"" + ExpireDate + "\"" +
                    "," + "\"" + aStaffSpec.HomeVolRestrict + "\"" +
                    "," + "\"" + aStaffSpec.SharedVolRestrict + "\"" +
                    "," + "\"" + aStaffSpec.Vol1VolRestrict + "\"";

                return wNewStaffJRBText;
            }
            else return "";
        }

        public void create(staffSpecSL aStaffSpecSL, DateTime runDateTime)
        {
            if (aStaffSpecSL.Count > 0)
            {
                StreamWriter wNewNDSStream = new StreamWriter(
                    mJRBFilesPath + "\\staff\\todo\\NewStaffLogins" + runDateTime.ToString("yyyyMMddHHmmss") + ".txt"
                    );
                foreach (staffSpec ss in aStaffSpecSL.Values)
                    wNewNDSStream.WriteLine(createNDSString(ss));
                wNewNDSStream.Close();
            }
        }

        public void enable(staffSpecSL aStaffSpecSL, DateTime runDateTime)
        {
            if (aStaffSpecSL.Count > 0)
            {
                StreamWriter wNewNDSStream = new StreamWriter(
                    mJRBFilesPath + "\\staff\\todo\\EnableStaffLogins" + runDateTime.ToString("yyyyMMddHHmmss") + ".txt"
                    );
                foreach (staffSpec ss in aStaffSpecSL.Values)
                    wNewNDSStream.WriteLine(enableNDSString(ss));
                wNewNDSStream.Close();
            }
        }

        public void disable(staffSpecSL aStaffSpecSL, DateTime runDateTime)
        {
            if (aStaffSpecSL.Count > 0)
            {
                StreamWriter wNewNDSStream = new StreamWriter(
                    mJRBFilesPath + "\\staff\\todo\\DisableStaffLogins" + runDateTime.ToString("yyyyMMddHHmmss") + ".txt"
                    );
                foreach (staffSpec ss in aStaffSpecSL.Values)
                    wNewNDSStream.WriteLine(disableNDSString(ss));
                wNewNDSStream.Close();
            }
        }

        public void createLookupFile(String[] aNDSNameSet)
        {
            StreamWriter wNewNDSStream = new StreamWriter(mJRBFilesPath + mJBLookupBat);
            foreach (String s in aNDSNameSet)
                wNewNDSStream.WriteLine(
                    mJRBFilesPath + mJBLookupExe +
                    " \"" + s + "\" /j /y=s /l=filename,\"" + mOnNDSFile + "\"\n"
                );
            wNewNDSStream.Close();
        }

        private void addAttributeValue(
            SortedList<String, List<String>> aAttributeSet,
            String aAttributeName, String aAttributeValue
        )
        {
            if (!aAttributeSet.ContainsKey(aAttributeName))
            {
                List<String> wAttributeList = new List<string>();
                aAttributeSet.Add(aAttributeName, wAttributeList);
            }
            aAttributeSet[aAttributeName].Add(aAttributeValue);
        }

        public SortedList<String, List<String>> GetLDAPInfo(String aFilter)
        {
            SortedList<String, List<String>> wSL = null;
            String domainAndUsername = @"LDAP://212.219.42.19/o=WC";
            string userName = string.Empty;
            string passWord = string.Empty;
            AuthenticationTypes at = AuthenticationTypes.Anonymous;

            //Create the object necessary to read the info from the LDAP directory
            DirectoryEntry entry = new DirectoryEntry(domainAndUsername, userName, passWord, at);
            DirectorySearcher mySearcher = new DirectorySearcher(entry);
            SearchResultCollection results;
            mySearcher.Filter = aFilter;

            try
            {
                results = mySearcher.FindAll();
                if (results.Count > 0)
                {
                    SearchResult resEnt = results[0];
                    {
                        wSL = new SortedList<String, List<String>>();
                        ResultPropertyCollection propcoll = resEnt.Properties;
                        String wKey = "";
                        foreach (string key in propcoll.PropertyNames)
                        {
                            wKey = key;
                            switch (key)
                            {
                                case "sn": wKey = "surname"; break;
                                case "l": wKey = "location"; break;
                                case "st": wKey = "state"; break;
                                case "uid": wKey = "userid"; break;
                                default: break;
                            }
                            if (key != "nsimhint")
                                foreach (object values in propcoll[key])
                                    addAttributeValue(wSL, wKey, values.ToString());
                        }
                        //mResult.Add(wSL["cn"][0], wSL);
                    }
                }
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
            }
            return wSL;
        }

        public String[] createSucceeded(staffSpecSL aStaffSpecSL)
        {
            List<String> wCS = new List<String>();
            StreamReader wNewNDSStream = new StreamReader(mJRBFilesPath + "\\staff\\todo\\" + mOnNDSFile);
            String wOnNDSLine = "";
            while (!wNewNDSStream.EndOfStream)
            {
                wOnNDSLine = wNewNDSStream.ReadLine();
                if (wOnNDSLine.Length > 0) wOnNDSLine = wOnNDSLine.Trim().Substring(12);
                if (aStaffSpecSL.ContainsKey(wOnNDSLine))
                    wCS.Add(aStaffSpecSL[wOnNDSLine].queueItem.ToString());
                //do we need to send e-mail to Line manager here?
            }

            wNewNDSStream.Close();
            StreamWriter wNewNDSStream2 = new StreamWriter(mJRBFilesPath + "\\staff\\todo\\" + mOnNDSFile);
            wNewNDSStream2.Close();
            return wCS.ToArray();
        }
    }
}
